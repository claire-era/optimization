if(step==i) iter_tab <<- tab
i=i+1
}
return(tab)
}
MaximizeTab(hihi,0)
library(shiny)
setwd("D:/Documents/150/project2020/latest_042020/")
source("MAIN.r")
# Define UI ----
ui <- fluidPage(
titlePanel("CMSC 150 Project"),
navbarPage(
"150 PROJECT SOLVERS",
tabPanel(
"Optimization",
titlePanel("Optimization: Simplex-Golf Clubs ship analysis"),
sidebarLayout(position="left",
mainPanel(
),
sidebarPanel(
checkboxInput("show_init_tab", "Show initial tableau", value=FALSE),
actionButton("optimize_button", strong("OPTIMIZE"), width = '100%'),
hr(),
fluidRow(
column(2,h5("STEP:")),
column(3,numericInput("step_input", NULL,value=0)),
column(7,actionButton("update_button", strong("UPDATE"), width='100%'))
),
fluidRow(
column(4,h5(textOutput("mincost_label"))),
column(3,h5(textOutput("min_cost")))
)
)
)
)
)
)
# SERVER LOGIC ----
server <- function(input, output) {
#put reactive expression for simplex
#RETURNS a list 'res'
#call this variable whenever calling an output..
simplex_reactive <- eventReactive(input$optimize_button,{
supply = c(input$s1, input$s2, input$s3)
demand = c(input$d1, input$d2, input$d3, input$d4, input$d5)
data = c(input$x1,input$x2,input$x3,input$x4,input$x5,input$x6,input$x7,input$x8,input$x9,input$x10,input$x11,input$x12,input$x13,input$x14,input$x15)
#CALL SIMPLEX BACKEND FROM MAIN.r
SimplexBackend(supply, demand, data)
})
update_reactive <- eventReactive(input$update_button,{
step = input$step_input
tablist = (simplex_reactive())$tablist
if(step>length(tablist)) return (NULL)
if(step<1) return (NULL)
return(list(curr_tab = tablist[step], sol_tab = SolutionTable(tablist[[step]])))
})
# ------------------ OUTPUT VARIABLES
output$solution_table <- renderTable({
res = simplex_reactive()
# if(input$show_init_tab == TRUE) return (SolutionTable(res$init_tab))
update_reactive()$sol_tab
})
output$init_table <- renderTable({
if(input$show_init_tab == FALSE) return (NULL)
(simplex_reactive())$init_tab
})
output$current_table <- renderTable({
update_reactive()$curr_tab
})
output$min_cost <- renderText({
(simplex_reactive())$mincost
})
output$mincost_label <- renderText({
"MINIMUM COST: "
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
setwd("D:/Documents/150/project2020/latest_042020/")
source("MAIN.r")
# Define UI ----
ui <- fluidPage(
titlePanel("CMSC 150 Project"),
navbarPage(
"150 PROJECT SOLVERS",
tabPanel(
"Optimization",
titlePanel("Optimization: Simplex-Golf Clubs ship analysis"),
sidebarLayout(position="left",
mainPanel(
fluidRow(
column(1,
numericInput("x1","", value = 5),
numericInput("x6","", value = 6),
numericInput("x11","", value = 3),
),
column(1,
numericInput("x2","", value = 6),
numericInput("x7","", value = 7),
numericInput("x12","", value = 5),
),
column(1,
numericInput("x3","", value = 7),
numericInput("x8","", value = 8),
numericInput("x13","", value = 7),
),
column(1,
numericInput("x4","", value = 8),
numericInput("x9","", value = 9),
numericInput("x14","", value = 11),
),
column(1,
numericInput("x5","", value = 9),
numericInput("x10","", value = 10),
numericInput("x15","", value = 13),
),
),
fluidRow()
),
sidebarPanel(
checkboxInput("show_init_tab", "Show initial tableau", value=FALSE),
actionButton("optimize_button", strong("OPTIMIZE"), width = '100%'),
hr(),
fluidRow(
column(2,h5("STEP:")),
column(3,numericInput("step_input", NULL,value=0)),
column(7,actionButton("update_button", strong("UPDATE"), width='100%'))
),
fluidRow(
column(4,h5(textOutput("mincost_label"))),
column(3,h5(textOutput("min_cost")))
)
)
)
)
)
)
# SERVER LOGIC ----
server <- function(input, output) {
#put reactive expression for simplex
#RETURNS a list 'res'
#call this variable whenever calling an output..
simplex_reactive <- eventReactive(input$optimize_button,{
supply = c(input$s1, input$s2, input$s3)
demand = c(input$d1, input$d2, input$d3, input$d4, input$d5)
data = c(input$x1,input$x2,input$x3,input$x4,input$x5,input$x6,input$x7,input$x8,input$x9,input$x10,input$x11,input$x12,input$x13,input$x14,input$x15)
#CALL SIMPLEX BACKEND FROM MAIN.r
SimplexBackend(supply, demand, data)
})
update_reactive <- eventReactive(input$update_button,{
step = input$step_input
tablist = (simplex_reactive())$tablist
if(step>length(tablist)) return (NULL)
if(step<1) return (NULL)
return(list(curr_tab = tablist[step], sol_tab = SolutionTable(tablist[[step]])))
})
# ------------------ OUTPUT VARIABLES
output$solution_table <- renderTable({
res = simplex_reactive()
# if(input$show_init_tab == TRUE) return (SolutionTable(res$init_tab))
update_reactive()$sol_tab
})
output$init_table <- renderTable({
if(input$show_init_tab == FALSE) return (NULL)
(simplex_reactive())$init_tab
})
output$current_table <- renderTable({
update_reactive()$curr_tab
})
output$min_cost <- renderText({
(simplex_reactive())$mincost
})
output$mincost_label <- renderText({
"MINIMUM COST: "
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
setwd("D:/Documents/150/project2020/latest_042020/")
source("MAIN.r")
# Define UI ----
ui <- fluidPage(
titlePanel("CMSC 150 Project"),
navbarPage(
"150 PROJECT SOLVERS",
tabPanel(
"Optimization",
titlePanel("Optimization: Simplex-Golf Clubs ship analysis"),
sidebarLayout(position="left",
mainPanel(
verticalLayout(
fluidRow(
column(1,
numericInput("x1","", value = 5),
numericInput("x6","", value = 6),
numericInput("x11","", value = 3),
),
column(1,
numericInput("x2","", value = 6),
numericInput("x7","", value = 7),
numericInput("x12","", value = 5),
),
column(1,
numericInput("x3","", value = 7),
numericInput("x8","", value = 8),
numericInput("x13","", value = 7),
),
column(1,
numericInput("x4","", value = 8),
numericInput("x9","", value = 9),
numericInput("x14","", value = 11),
),
column(1,
numericInput("x5","", value = 9),
numericInput("x10","", value = 10),
numericInput("x15","", value = 13),
),
),
fluidRow(
h5("DEMAND"),
numericInput("d1", "", value=100),
numericInput("d2", "", value=100),
numericInput("d3", "", value=100),
numericInput("d4", "", value=100),
numericInput("d5", "", value=100),
)
)
),
sidebarPanel(
checkboxInput("show_init_tab", "Show initial tableau", value=FALSE),
actionButton("optimize_button", strong("OPTIMIZE"), width = '100%'),
hr(),
fluidRow(
column(2,h5("STEP:")),
column(3,numericInput("step_input", NULL,value=0)),
column(7,actionButton("update_button", strong("UPDATE"), width='100%'))
),
fluidRow(
column(4,h5(textOutput("mincost_label"))),
column(3,h5(textOutput("min_cost")))
)
)
)
)
)
)
# SERVER LOGIC ----
server <- function(input, output) {
#put reactive expression for simplex
#RETURNS a list 'res'
#call this variable whenever calling an output..
simplex_reactive <- eventReactive(input$optimize_button,{
supply = c(input$s1, input$s2, input$s3)
demand = c(input$d1, input$d2, input$d3, input$d4, input$d5)
data = c(input$x1,input$x2,input$x3,input$x4,input$x5,input$x6,input$x7,input$x8,input$x9,input$x10,input$x11,input$x12,input$x13,input$x14,input$x15)
#CALL SIMPLEX BACKEND FROM MAIN.r
SimplexBackend(supply, demand, data)
})
update_reactive <- eventReactive(input$update_button,{
step = input$step_input
tablist = (simplex_reactive())$tablist
if(step>length(tablist)) return (NULL)
if(step<1) return (NULL)
return(list(curr_tab = tablist[step], sol_tab = SolutionTable(tablist[[step]])))
})
# ------------------ OUTPUT VARIABLES
output$solution_table <- renderTable({
res = simplex_reactive()
# if(input$show_init_tab == TRUE) return (SolutionTable(res$init_tab))
update_reactive()$sol_tab
})
output$init_table <- renderTable({
if(input$show_init_tab == FALSE) return (NULL)
(simplex_reactive())$init_tab
})
output$current_table <- renderTable({
update_reactive()$curr_tab
})
output$min_cost <- renderText({
(simplex_reactive())$mincost
})
output$mincost_label <- renderText({
"MINIMUM COST: "
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
library(shiny)
setwd("D:/Documents/150/project2020/latest_042020/")
source("MAIN.r")
# Define UI ----
ui <- fluidPage(
#CSS STYLESHEET
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "bootstrap.css")
),
#BODY
titlePanel("CMSC 150 Project - Optimization"),
sidebarLayout(
sidebarPanel(),
mainPanel(
tabsetPanel(
tabPanel("Table", NULL),
tabPanel("Tableau", NULL),
tabPanel("Solution",NULL)
)
)
)
)
# SERVER LOGIC ----
server <- function(input, output) {
#put reactive expression for simplex
#RETURNS a list 'res'
#call this variable whenever calling an output..
simplex_reactive <- eventReactive(input$optimize_button,{
supply = c(input$s1, input$s2, input$s3)
demand = c(input$d1, input$d2, input$d3, input$d4, input$d5)
data = c(input$x1,input$x2,input$x3,input$x4,input$x5,input$x6,input$x7,input$x8,input$x9,input$x10,input$x11,input$x12,input$x13,input$x14,input$x15)
#CALL SIMPLEX BACKEND FROM MAIN.r
SimplexBackend(supply, demand, data)
})
update_reactive <- eventReactive(input$update_button,{
step = input$step_input
tablist = (simplex_reactive())$tablist
if(step>length(tablist)) return (NULL)
if(step<1) return (NULL)
return(list(curr_tab = tablist[step], sol_tab = SolutionTable(tablist[[step]])))
})
# ------------------ OUTPUT VARIABLES
output$solution_table <- renderTable({
res = simplex_reactive()
# if(input$show_init_tab == TRUE) return (SolutionTable(res$init_tab))
update_reactive()$sol_tab
})
output$init_table <- renderTable({
if(input$show_init_tab == FALSE) return (NULL)
(simplex_reactive())$init_tab
})
output$current_table <- renderTable({
update_reactive()$curr_tab
})
output$min_cost <- renderText({
(simplex_reactive())$mincost
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
setwd("D:/Documents/150/project2020/latest_042020/")
source("MAIN.r")
# Define UI ----
ui <- fluidPage(
#CSS STYLESHEET
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "bootstrap.css")
),
#BODY
titlePanel("CMSC 150 Project - Optimization"),
sidebarLayout(
sidebarPanel(
tags$div(
class="sidebar", checked=NA,
checkboxInput("show_init_tab", "Show initial tableau", value=FALSE),
actionButton("optimize_button", strong("OPTIMIZE"), width = '100%'),
hr(),
splitLayout(
column(3,h5("STEP:")),
column(9,numericInput("step_input", NULL,value=0))
),
actionButton("update_button", strong("UPDATE"), width='100%'),
splitLayout(
tags$div(class="ans", checked=NA,
h4("MINIMUM COST: "),
h4(strong(textOutput("min_cost")))
)
)
)
),
mainPanel(
tabsetPanel(
tabPanel("Table", NULL),
tabPanel("Tableau", NULL),
tabPanel("Solution",NULL)
)
)
)
)
# SERVER LOGIC ----
server <- function(input, output) {
#put reactive expression for simplex
#RETURNS a list 'res'
#call this variable whenever calling an output..
simplex_reactive <- eventReactive(input$optimize_button,{
supply = c(input$s1, input$s2, input$s3)
demand = c(input$d1, input$d2, input$d3, input$d4, input$d5)
data = c(input$x1,input$x2,input$x3,input$x4,input$x5,input$x6,input$x7,input$x8,input$x9,input$x10,input$x11,input$x12,input$x13,input$x14,input$x15)
#CALL SIMPLEX BACKEND FROM MAIN.r
SimplexBackend(supply, demand, data)
})
update_reactive <- eventReactive(input$update_button,{
step = input$step_input
tablist = (simplex_reactive())$tablist
if(step>length(tablist)) return (NULL)
if(step<1) return (NULL)
return(list(curr_tab = tablist[step], sol_tab = SolutionTable(tablist[[step]])))
})
# ------------------ OUTPUT VARIABLES
output$solution_table <- renderTable({
res = simplex_reactive()
# if(input$show_init_tab == TRUE) return (SolutionTable(res$init_tab))
update_reactive()$sol_tab
})
output$init_table <- renderTable({
if(input$show_init_tab == FALSE) return (NULL)
(simplex_reactive())$init_tab
})
output$current_table <- renderTable({
update_reactive()$curr_tab
})
output$min_cost <- renderText({
(simplex_reactive())$mincost
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('D:/Downloads/quejada_AB8L.r')
if(sum(demand)>sum(supply)){
return(NA) #No feasible solution
}else{
#PHASE A. GET A FEASIBLE TABLEAU
result = CreateTab(supply, demand, data) #inside contains the inverse of the objective function embedded in the tableau
# init_tab <<- result$initialTableau
feasible_tab = GetFeasibleTab(result)
#PHASE B. APPLY STANDARD MAXIMIZATION IN TABLEAU
res=MaximizeTab(feasible_tab)
final_tab=res$final_tab
ftab <<- final_tab
tablist=res$tab_list
mcost = ((final_tab[nrow(final_tab),ncol(final_tab)])*-1)
res = list(init_tab = feasible_tab, final_tab = final_tab, tablist = tablist, mincost = mcost)
return(res)
}
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
runApp('FRONTEND.r')
